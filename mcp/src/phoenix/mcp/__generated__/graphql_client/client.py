# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict

from .async_base_client import AsyncBaseClient
from .get_prompt import GetPrompt


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def get_prompt(self, prompt_id: Any, **kwargs: Any) -> GetPrompt:
        query = gql(
            """
            query GetPrompt($promptId: GlobalID!) {
              node(id: $promptId) {
                __typename
                ... on Prompt {
                  name
                  createdAt
                  description
                  id
                  sourcePromptId
                  version {
                    createdAt
                    description
                    id
                    invocationParameters
                    metadata
                    modelName
                    modelProvider
                    sequenceNumber
                    responseFormat {
                      definition
                    }
                    tags {
                      description
                      id
                      name
                      promptVersionId
                    }
                    template {
                      ... on PromptStringTemplate {
                        __typename
                        template
                      }
                      ... on PromptChatTemplate {
                        __typename
                        messages {
                          content {
                            ... on TextContentPart {
                              __typename
                              text {
                                text
                              }
                            }
                            ... on ToolCallContentPart {
                              __typename
                              toolCall {
                                toolCallId
                                toolCall {
                                  arguments
                                  name
                                }
                              }
                            }
                            ... on ToolResultContentPart {
                              __typename
                              toolResult {
                                result
                                toolCallId
                              }
                            }
                          }
                          role
                        }
                      }
                    }
                    templateFormat
                    templateType
                    tools {
                      definition
                    }
                  }
                  versionTags {
                    description
                    id
                    name
                    promptVersionId
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"promptId": prompt_id}
        response = await self.execute(
            query=query, operation_name="GetPrompt", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetPrompt.model_validate(data)
