# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    ChatCompletionMutationPayloadFields,
    ChatCompletionOverDatasetMutationPayloadFields,
    CreateSystemApiKeyMutationPayloadFields,
    CreateUserApiKeyMutationPayloadFields,
    DatasetMutationPayloadFields,
    DeleteApiKeyMutationPayloadFields,
    DeletePromptMutationPayloadFields,
    ExperimentMutationPayloadFields,
    ExportedFileFields,
    PromptFields,
    PromptLabelMutationPayloadFields,
    PromptVersionTagMutationPayloadFields,
    QueryFields,
    SpanAnnotationMutationPayloadFields,
    TraceAnnotationMutationPayloadFields,
    UserMutationPayloadFields,
)
from .custom_typing_fields import GraphQLField
from .input_types import (
    AddExamplesToDatasetInput,
    AddSpansToDatasetInput,
    ChatCompletionInput,
    ChatCompletionOverDatasetInput,
    ClearProjectInput,
    ClonePromptInput,
    ClusterInput,
    CreateApiKeyInput,
    CreateChatPromptInput,
    CreateChatPromptVersionInput,
    CreateDatasetInput,
    CreatePromptLabelInput,
    CreateSpanAnnotationInput,
    CreateTraceAnnotationInput,
    CreateUserApiKeyInput,
    CreateUserInput,
    DeleteAnnotationsInput,
    DeleteApiKeyInput,
    DeleteDatasetExamplesInput,
    DeleteDatasetInput,
    DeleteExperimentsInput,
    DeletePromptInput,
    DeletePromptLabelInput,
    DeletePromptVersionTagInput,
    DeleteUsersInput,
    PatchAnnotationInput,
    PatchDatasetExamplesInput,
    PatchDatasetInput,
    PatchPromptInput,
    PatchPromptLabelInput,
    PatchUserInput,
    PatchViewerInput,
    SetPromptLabelInput,
    SetPromptVersionTagInput,
    UnsetPromptLabelInput,
)


class Mutation:
    @classmethod
    def create_system_api_key(
        cls, input: CreateApiKeyInput
    ) -> CreateSystemApiKeyMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateApiKeyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSystemApiKeyMutationPayloadFields(
            field_name="createSystemApiKey", arguments=cleared_arguments
        )

    @classmethod
    def create_user_api_key(
        cls, input: CreateUserApiKeyInput
    ) -> CreateUserApiKeyMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateUserApiKeyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateUserApiKeyMutationPayloadFields(
            field_name="createUserApiKey", arguments=cleared_arguments
        )

    @classmethod
    def delete_system_api_key(
        cls, input: DeleteApiKeyInput
    ) -> DeleteApiKeyMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteApiKeyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteApiKeyMutationPayloadFields(
            field_name="deleteSystemApiKey", arguments=cleared_arguments
        )

    @classmethod
    def delete_user_api_key(
        cls, input: DeleteApiKeyInput
    ) -> DeleteApiKeyMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteApiKeyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteApiKeyMutationPayloadFields(
            field_name="deleteUserApiKey", arguments=cleared_arguments
        )

    @classmethod
    def chat_completion_over_dataset(
        cls, input: ChatCompletionOverDatasetInput
    ) -> ChatCompletionOverDatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChatCompletionOverDatasetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChatCompletionOverDatasetMutationPayloadFields(
            field_name="chatCompletionOverDataset", arguments=cleared_arguments
        )

    @classmethod
    def chat_completion(
        cls, input: ChatCompletionInput
    ) -> ChatCompletionMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChatCompletionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChatCompletionMutationPayloadFields(
            field_name="chatCompletion", arguments=cleared_arguments
        )

    @classmethod
    def create_dataset(cls, input: CreateDatasetInput) -> DatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateDatasetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetMutationPayloadFields(
            field_name="createDataset", arguments=cleared_arguments
        )

    @classmethod
    def patch_dataset(cls, input: PatchDatasetInput) -> DatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchDatasetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetMutationPayloadFields(
            field_name="patchDataset", arguments=cleared_arguments
        )

    @classmethod
    def add_spans_to_dataset(
        cls, input: AddSpansToDatasetInput
    ) -> DatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddSpansToDatasetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetMutationPayloadFields(
            field_name="addSpansToDataset", arguments=cleared_arguments
        )

    @classmethod
    def add_examples_to_dataset(
        cls, input: AddExamplesToDatasetInput
    ) -> DatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddExamplesToDatasetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetMutationPayloadFields(
            field_name="addExamplesToDataset", arguments=cleared_arguments
        )

    @classmethod
    def delete_dataset(cls, input: DeleteDatasetInput) -> DatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteDatasetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetMutationPayloadFields(
            field_name="deleteDataset", arguments=cleared_arguments
        )

    @classmethod
    def patch_dataset_examples(
        cls, input: PatchDatasetExamplesInput
    ) -> DatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchDatasetExamplesInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetMutationPayloadFields(
            field_name="patchDatasetExamples", arguments=cleared_arguments
        )

    @classmethod
    def delete_dataset_examples(
        cls, input: DeleteDatasetExamplesInput
    ) -> DatasetMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteDatasetExamplesInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetMutationPayloadFields(
            field_name="deleteDatasetExamples", arguments=cleared_arguments
        )

    @classmethod
    def delete_experiments(
        cls, input: DeleteExperimentsInput
    ) -> ExperimentMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteExperimentsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExperimentMutationPayloadFields(
            field_name="deleteExperiments", arguments=cleared_arguments
        )

    @classmethod
    def export_events(
        cls, event_ids: str, *, file_name: Optional[str] = None
    ) -> ExportedFileFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "eventIds": {"type": "ID!", "value": event_ids},
            "fileName": {"type": "String", "value": file_name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExportedFileFields(
            field_name="exportEvents", arguments=cleared_arguments
        )

    @classmethod
    def export_clusters(
        cls, clusters: ClusterInput, *, file_name: Optional[str] = None
    ) -> ExportedFileFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "clusters": {"type": "ClusterInput!", "value": clusters},
            "fileName": {"type": "String", "value": file_name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExportedFileFields(
            field_name="exportClusters", arguments=cleared_arguments
        )

    @classmethod
    def delete_project(cls, id: Any) -> QueryFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "GlobalID!", "value": id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return QueryFields(field_name="deleteProject", arguments=cleared_arguments)

    @classmethod
    def clear_project(cls, input: ClearProjectInput) -> QueryFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ClearProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return QueryFields(field_name="clearProject", arguments=cleared_arguments)

    @classmethod
    def create_chat_prompt(cls, input: CreateChatPromptInput) -> PromptFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateChatPromptInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptFields(field_name="createChatPrompt", arguments=cleared_arguments)

    @classmethod
    def create_chat_prompt_version(
        cls, input: CreateChatPromptVersionInput
    ) -> PromptFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateChatPromptVersionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptFields(
            field_name="createChatPromptVersion", arguments=cleared_arguments
        )

    @classmethod
    def delete_prompt(
        cls, input: DeletePromptInput
    ) -> DeletePromptMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeletePromptInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletePromptMutationPayloadFields(
            field_name="deletePrompt", arguments=cleared_arguments
        )

    @classmethod
    def clone_prompt(cls, input: ClonePromptInput) -> PromptFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ClonePromptInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptFields(field_name="clonePrompt", arguments=cleared_arguments)

    @classmethod
    def patch_prompt(cls, input: PatchPromptInput) -> PromptFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchPromptInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptFields(field_name="patchPrompt", arguments=cleared_arguments)

    @classmethod
    def delete_prompt_version_tag(
        cls, input: DeletePromptVersionTagInput
    ) -> PromptVersionTagMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeletePromptVersionTagInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptVersionTagMutationPayloadFields(
            field_name="deletePromptVersionTag", arguments=cleared_arguments
        )

    @classmethod
    def set_prompt_version_tag(
        cls, input: SetPromptVersionTagInput
    ) -> PromptVersionTagMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SetPromptVersionTagInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptVersionTagMutationPayloadFields(
            field_name="setPromptVersionTag", arguments=cleared_arguments
        )

    @classmethod
    def create_prompt_label(
        cls, input: CreatePromptLabelInput
    ) -> PromptLabelMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreatePromptLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptLabelMutationPayloadFields(
            field_name="createPromptLabel", arguments=cleared_arguments
        )

    @classmethod
    def patch_prompt_label(
        cls, input: PatchPromptLabelInput
    ) -> PromptLabelMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchPromptLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptLabelMutationPayloadFields(
            field_name="patchPromptLabel", arguments=cleared_arguments
        )

    @classmethod
    def delete_prompt_label(
        cls, input: DeletePromptLabelInput
    ) -> PromptLabelMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeletePromptLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptLabelMutationPayloadFields(
            field_name="deletePromptLabel", arguments=cleared_arguments
        )

    @classmethod
    def set_prompt_label(
        cls, input: SetPromptLabelInput
    ) -> PromptLabelMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SetPromptLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptLabelMutationPayloadFields(
            field_name="setPromptLabel", arguments=cleared_arguments
        )

    @classmethod
    def unset_prompt_label(
        cls, input: UnsetPromptLabelInput
    ) -> PromptLabelMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnsetPromptLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PromptLabelMutationPayloadFields(
            field_name="unsetPromptLabel", arguments=cleared_arguments
        )

    @classmethod
    def create_span_annotations(
        cls, input: CreateSpanAnnotationInput
    ) -> SpanAnnotationMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateSpanAnnotationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SpanAnnotationMutationPayloadFields(
            field_name="createSpanAnnotations", arguments=cleared_arguments
        )

    @classmethod
    def patch_span_annotations(
        cls, input: PatchAnnotationInput
    ) -> SpanAnnotationMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchAnnotationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SpanAnnotationMutationPayloadFields(
            field_name="patchSpanAnnotations", arguments=cleared_arguments
        )

    @classmethod
    def delete_span_annotations(
        cls, input: DeleteAnnotationsInput
    ) -> SpanAnnotationMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteAnnotationsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SpanAnnotationMutationPayloadFields(
            field_name="deleteSpanAnnotations", arguments=cleared_arguments
        )

    @classmethod
    def create_trace_annotations(
        cls, input: CreateTraceAnnotationInput
    ) -> TraceAnnotationMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateTraceAnnotationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TraceAnnotationMutationPayloadFields(
            field_name="createTraceAnnotations", arguments=cleared_arguments
        )

    @classmethod
    def patch_trace_annotations(
        cls, input: PatchAnnotationInput
    ) -> TraceAnnotationMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchAnnotationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TraceAnnotationMutationPayloadFields(
            field_name="patchTraceAnnotations", arguments=cleared_arguments
        )

    @classmethod
    def delete_trace_annotations(
        cls, input: DeleteAnnotationsInput
    ) -> TraceAnnotationMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteAnnotationsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TraceAnnotationMutationPayloadFields(
            field_name="deleteTraceAnnotations", arguments=cleared_arguments
        )

    @classmethod
    def delete_traces(cls, trace_ids: Any) -> QueryFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "traceIds": {"type": "GlobalID!", "value": trace_ids}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return QueryFields(field_name="deleteTraces", arguments=cleared_arguments)

    @classmethod
    def create_user(cls, input: CreateUserInput) -> UserMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserMutationPayloadFields(
            field_name="createUser", arguments=cleared_arguments
        )

    @classmethod
    def patch_user(cls, input: PatchUserInput) -> UserMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserMutationPayloadFields(
            field_name="patchUser", arguments=cleared_arguments
        )

    @classmethod
    def patch_viewer(cls, input: PatchViewerInput) -> UserMutationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PatchViewerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserMutationPayloadFields(
            field_name="patchViewer", arguments=cleared_arguments
        )

    @classmethod
    def delete_users(cls, input: DeleteUsersInput) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteUsersInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(field_name="deleteUsers", arguments=cleared_arguments)
