# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    ModelProvider,
    PromptMessageRole,
    PromptTemplateFormat,
    PromptTemplateType,
)


class GetPrompt(BaseModel):
    node: Union["GetPromptNodeNode", "GetPromptNodePrompt"] = Field(
        discriminator="typename__"
    )


class GetPromptNodeNode(BaseModel):
    typename__: Literal[
        "Dataset",
        "DatasetExample",
        "DatasetVersion",
        "Dimension",
        "EmbeddingDimension",
        "Experiment",
        "ExperimentRun",
        "ExperimentRunAnnotation",
        "Node",
        "Project",
        "ProjectSession",
        "PromptLabel",
        "PromptVersion",
        "PromptVersionTag",
        "Span",
        "SpanAnnotation",
        "SystemApiKey",
        "Trace",
        "TraceAnnotation",
        "User",
        "UserApiKey",
        "UserRole",
    ] = Field(alias="__typename")


class GetPromptNodePrompt(BaseModel):
    typename__: Literal["Prompt"] = Field(alias="__typename")
    name: Any
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    id: Any
    source_prompt_id: Optional[Any] = Field(alias="sourcePromptId")
    version: "GetPromptNodePromptVersion"
    version_tags: List["GetPromptNodePromptVersionTags"] = Field(alias="versionTags")


class GetPromptNodePromptVersion(BaseModel):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    id: Any
    invocation_parameters: Optional[Any] = Field(alias="invocationParameters")
    metadata: Any
    model_name: str = Field(alias="modelName")
    model_provider: ModelProvider = Field(alias="modelProvider")
    sequence_number: int = Field(alias="sequenceNumber")
    response_format: Optional["GetPromptNodePromptVersionResponseFormat"] = Field(
        alias="responseFormat"
    )
    tags: List["GetPromptNodePromptVersionTags"]
    template: Union[
        "GetPromptNodePromptVersionTemplatePromptStringTemplate",
        "GetPromptNodePromptVersionTemplatePromptChatTemplate",
    ] = Field(discriminator="typename__")
    template_format: PromptTemplateFormat = Field(alias="templateFormat")
    template_type: PromptTemplateType = Field(alias="templateType")
    tools: List["GetPromptNodePromptVersionTools"]


class GetPromptNodePromptVersionResponseFormat(BaseModel):
    definition: Any


class GetPromptNodePromptVersionTags(BaseModel):
    description: Optional[str]
    id: Any
    name: Any
    prompt_version_id: Any = Field(alias="promptVersionId")


class GetPromptNodePromptVersionTemplatePromptStringTemplate(BaseModel):
    typename__: Literal["PromptStringTemplate"] = Field(alias="__typename")
    template: str


class GetPromptNodePromptVersionTemplatePromptChatTemplate(BaseModel):
    typename__: Literal["PromptChatTemplate"] = Field(alias="__typename")
    messages: List["GetPromptNodePromptVersionTemplatePromptChatTemplateMessages"]


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessages(BaseModel):
    content: List[
        Annotated[
            Union[
                "GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentTextContentPart",
                "GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPart",
                "GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolResultContentPart",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    role: PromptMessageRole


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentTextContentPart(
    BaseModel
):
    typename__: Literal["TextContentPart"] = Field(alias="__typename")
    text: "GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentTextContentPartText"


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentTextContentPartText(
    BaseModel
):
    text: str


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPart(
    BaseModel
):
    typename__: Literal["ToolCallContentPart"] = Field(alias="__typename")
    tool_call: (
        "GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPartToolCall"
    ) = Field(alias="toolCall")


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPartToolCall(
    BaseModel
):
    tool_call_id: str = Field(alias="toolCallId")
    tool_call: (
        "GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPartToolCallToolCall"
    ) = Field(alias="toolCall")


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPartToolCallToolCall(
    BaseModel
):
    arguments: str
    name: str


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolResultContentPart(
    BaseModel
):
    typename__: Literal["ToolResultContentPart"] = Field(alias="__typename")
    tool_result: (
        "GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolResultContentPartToolResult"
    ) = Field(alias="toolResult")


class GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolResultContentPartToolResult(
    BaseModel
):
    result: Any
    tool_call_id: str = Field(alias="toolCallId")


class GetPromptNodePromptVersionTools(BaseModel):
    definition: Any


GetPrompt.model_rebuild()
GetPromptNodePrompt.model_rebuild()
GetPromptNodePromptVersion.model_rebuild()
GetPromptNodePromptVersionTemplatePromptChatTemplate.model_rebuild()
GetPromptNodePromptVersionTemplatePromptChatTemplateMessages.model_rebuild()
GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentTextContentPart.model_rebuild()
GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPart.model_rebuild()
GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolCallContentPartToolCall.model_rebuild()
GetPromptNodePromptVersionTemplatePromptChatTemplateMessagesContentToolResultContentPart.model_rebuild()
