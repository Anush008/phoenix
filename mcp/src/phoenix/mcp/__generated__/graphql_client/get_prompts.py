# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ModelProvider, PromptTemplateFormat, PromptTemplateType


class GetPrompts(BaseModel):
    prompts: "GetPromptsPrompts"


class GetPromptsPrompts(BaseModel):
    edges: List["GetPromptsPromptsEdges"]


class GetPromptsPromptsEdges(BaseModel):
    cursor: str
    node: "GetPromptsPromptsEdgesNode"


class GetPromptsPromptsEdgesNode(BaseModel):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    id: Any
    name: Any
    version: "GetPromptsPromptsEdgesNodeVersion"


class GetPromptsPromptsEdgesNodeVersion(BaseModel):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    id: Any
    invocation_parameters: Optional[Any] = Field(alias="invocationParameters")
    metadata: Any
    model_name: str = Field(alias="modelName")
    model_provider: ModelProvider = Field(alias="modelProvider")
    sequence_number: int = Field(alias="sequenceNumber")
    template_format: PromptTemplateFormat = Field(alias="templateFormat")
    template_type: PromptTemplateType = Field(alias="templateType")


GetPrompts.model_rebuild()
GetPromptsPrompts.model_rebuild()
GetPromptsPromptsEdges.model_rebuild()
GetPromptsPromptsEdgesNode.model_rebuild()
