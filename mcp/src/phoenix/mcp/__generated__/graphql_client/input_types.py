# Generated by ariadne-codegen
# Source: app/schema.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AnnotatorKind,
    CanonicalParameterName,
    ChatCompletionMessageRole,
    DataQualityMetric,
    DatasetColumn,
    DatasetVersionColumn,
    DimensionDataType,
    DimensionShape,
    DimensionType,
    EvalAttr,
    GenerativeProviderKey,
    ModelProvider,
    PerformanceMetric,
    ProjectSessionColumn,
    PromptTemplateFormat,
    SortDir,
    SpanAnnotationColumn,
    SpanColumn,
    TraceAnnotationColumn,
    UserRoleInput,
)


class AddExamplesToDatasetInput(BaseModel):
    dataset_id: Any = Field(alias="datasetId")
    examples: List["DatasetExampleInput"]
    dataset_version_description: Optional[str] = Field(
        alias="datasetVersionDescription", default=None
    )
    dataset_version_metadata: Optional[Any] = Field(
        alias="datasetVersionMetadata", default=None
    )


class AddSpansToDatasetInput(BaseModel):
    dataset_id: Any = Field(alias="datasetId")
    span_ids: List[Any] = Field(alias="spanIds")
    dataset_version_description: Optional[str] = Field(
        alias="datasetVersionDescription", default=None
    )
    dataset_version_metadata: Optional[Any] = Field(
        alias="datasetVersionMetadata", default=None
    )


class ChatCompletionInput(BaseModel):
    messages: List["ChatCompletionMessageInput"]
    model: "GenerativeModelInput"
    invocation_parameters: List["InvocationParameterInput"] = Field(
        alias="invocationParameters", default_factory=lambda: []
    )
    tools: Optional[List[Any]] = None
    api_key: Optional[str] = Field(alias="apiKey", default=None)
    template: Optional["PromptTemplateOptions"] = None
    prompt_name: Optional[Any] = Field(alias="promptName", default=None)


class ChatCompletionMessageInput(BaseModel):
    role: ChatCompletionMessageRole
    content: Any = ""
    tool_calls: Optional[List[Any]] = Field(alias="toolCalls", default=None)
    tool_call_id: Optional[str] = Field(alias="toolCallId", default=None)


class ChatCompletionOverDatasetInput(BaseModel):
    messages: List["ChatCompletionMessageInput"]
    model: "GenerativeModelInput"
    invocation_parameters: List["InvocationParameterInput"] = Field(
        alias="invocationParameters", default_factory=lambda: []
    )
    tools: Optional[List[Any]] = None
    api_key: Optional[str] = Field(alias="apiKey", default=None)
    template_format: PromptTemplateFormat = Field(
        alias="templateFormat", default=PromptTemplateFormat.MUSTACHE
    )
    dataset_id: Any = Field(alias="datasetId")
    dataset_version_id: Optional[Any] = Field(alias="datasetVersionId", default=None)
    experiment_name: Optional[str] = Field(alias="experimentName", default=None)
    experiment_description: Optional[str] = Field(
        alias="experimentDescription", default=None
    )
    experiment_metadata: Optional[Any] = Field(
        alias="experimentMetadata",
        default_factory=lambda: globals()[""].model_validate({}),
    )
    prompt_name: Optional[Any] = Field(alias="promptName", default=None)


class ChatPromptVersionInput(BaseModel):
    description: Optional[str] = None
    template_format: PromptTemplateFormat = Field(alias="templateFormat")
    template: "PromptChatTemplateInput"
    invocation_parameters: Any = Field(
        alias="invocationParameters",
        default_factory=lambda: globals()[""].model_validate({}),
    )
    tools: List["ToolDefinitionInput"] = Field(default_factory=lambda: [])
    response_format: Optional["ResponseFormatInput"] = Field(
        alias="responseFormat", default=None
    )
    model_provider: ModelProvider = Field(alias="modelProvider")
    model_name: str = Field(alias="modelName")


class ClearProjectInput(BaseModel):
    id: Any
    end_time: Optional[Any] = Field(alias="endTime", default=None)


class ClonePromptInput(BaseModel):
    name: Any
    description: Optional[str] = None
    prompt_id: Any = Field(alias="promptId")


class ClusterInput(BaseModel):
    event_ids: List[str] = Field(alias="eventIds")
    id: Optional[str] = None


class ContentPartInput(BaseModel):
    text: Optional["TextContentValueInput"] = None
    tool_call: Optional["ToolCallContentValueInput"] = Field(
        alias="toolCall", default=None
    )
    tool_result: Optional["ToolResultContentValueInput"] = Field(
        alias="toolResult", default=None
    )


class CreateApiKeyInput(BaseModel):
    name: str
    description: Optional[str] = None
    expires_at: Optional[Any] = Field(alias="expiresAt", default=None)


class CreateChatPromptInput(BaseModel):
    name: Any
    description: Optional[str] = None
    prompt_version: "ChatPromptVersionInput" = Field(alias="promptVersion")


class CreateChatPromptVersionInput(BaseModel):
    prompt_id: Any = Field(alias="promptId")
    prompt_version: "ChatPromptVersionInput" = Field(alias="promptVersion")
    tags: Optional[List["SetPromptVersionTagInput"]] = None


class CreateDatasetInput(BaseModel):
    name: str
    description: Optional[str] = None
    metadata: Optional[Any] = None


class CreatePromptLabelInput(BaseModel):
    name: Any
    description: Optional[str] = None


class CreateSpanAnnotationInput(BaseModel):
    span_id: Any = Field(alias="spanId")
    name: str
    annotator_kind: AnnotatorKind = Field(alias="annotatorKind")
    label: Optional[str] = None
    score: Optional[float] = None
    explanation: Optional[str] = None
    metadata: Any = Field(default_factory=lambda: globals()[""].model_validate({}))


class CreateTraceAnnotationInput(BaseModel):
    trace_id: Any = Field(alias="traceId")
    name: str
    annotator_kind: AnnotatorKind = Field(alias="annotatorKind")
    label: Optional[str] = None
    score: Optional[float] = None
    explanation: Optional[str] = None
    metadata: Any = Field(default_factory=lambda: globals()[""].model_validate({}))


class CreateUserApiKeyInput(BaseModel):
    name: str
    description: Optional[str] = None
    expires_at: Optional[Any] = Field(alias="expiresAt", default=None)


class CreateUserInput(BaseModel):
    email: str
    username: str
    password: str
    role: UserRoleInput


class DataQualityMetricInput(BaseModel):
    metric: DataQualityMetric
    column_name: Optional[str] = Field(alias="columnName", default=None)


class DatasetExampleInput(BaseModel):
    input: Any
    output: Any
    metadata: Any
    span_id: Optional[Any] = Field(alias="spanId", default=None)


class DatasetExamplePatch(BaseModel):
    example_id: Any = Field(alias="exampleId")
    input: Optional[Any] = None
    output: Optional[Any] = None
    metadata: Optional[Any] = None


class DatasetSort(BaseModel):
    col: DatasetColumn
    dir: SortDir


class DatasetVersionSort(BaseModel):
    col: DatasetVersionColumn
    dir: SortDir


class DeleteAnnotationsInput(BaseModel):
    annotation_ids: List[Any] = Field(alias="annotationIds")


class DeleteApiKeyInput(BaseModel):
    id: Any


class DeleteDatasetExamplesInput(BaseModel):
    example_ids: List[Any] = Field(alias="exampleIds")
    dataset_version_description: Optional[str] = Field(
        alias="datasetVersionDescription", default=None
    )
    dataset_version_metadata: Optional[Any] = Field(
        alias="datasetVersionMetadata", default=None
    )


class DeleteDatasetInput(BaseModel):
    dataset_id: Any = Field(alias="datasetId")


class DeleteExperimentsInput(BaseModel):
    experiment_ids: List[Any] = Field(alias="experimentIds")


class DeletePromptInput(BaseModel):
    prompt_id: Any = Field(alias="promptId")


class DeletePromptLabelInput(BaseModel):
    prompt_label_id: Any = Field(alias="promptLabelId")


class DeletePromptVersionTagInput(BaseModel):
    prompt_version_tag_id: Any = Field(alias="promptVersionTagId")


class DeleteUsersInput(BaseModel):
    user_ids: List[Any] = Field(alias="userIds")


class DimensionFilter(BaseModel):
    types: Optional[List[DimensionType]] = None
    shapes: Optional[List[DimensionShape]] = None
    data_types: Optional[List[DimensionDataType]] = Field(
        alias="dataTypes", default=None
    )


class DimensionInput(BaseModel):
    name: str
    type: DimensionType


class EvalResultKey(BaseModel):
    name: str
    attr: EvalAttr


class GenerativeModelInput(BaseModel):
    provider_key: GenerativeProviderKey = Field(alias="providerKey")
    name: str
    base_url: Optional[str] = Field(alias="baseUrl", default=None)
    endpoint: Optional[str] = None
    api_version: Optional[str] = Field(alias="apiVersion", default=None)


class Granularity(BaseModel):
    evaluation_window_minutes: int = Field(alias="evaluationWindowMinutes")
    sampling_interval_minutes: int = Field(alias="samplingIntervalMinutes")


class InputCoordinate2D(BaseModel):
    x: float
    y: float


class InputCoordinate3D(BaseModel):
    x: float
    y: float
    z: float


class InvocationParameterInput(BaseModel):
    invocation_name: str = Field(alias="invocationName")
    canonical_name: Optional[CanonicalParameterName] = Field(
        alias="canonicalName", default=None
    )
    value_int: Optional[int] = Field(alias="valueInt", default=None)
    value_float: Optional[float] = Field(alias="valueFloat", default=None)
    value_bool: Optional[bool] = Field(alias="valueBool", default=None)
    value_string: Optional[str] = Field(alias="valueString", default=None)
    value_json: Optional[Any] = Field(alias="valueJson", default=None)
    value_string_list: Optional[List[str]] = Field(
        alias="valueStringList", default=None
    )
    value_boolean: Optional[bool] = Field(alias="valueBoolean", default=None)


class ModelsInput(BaseModel):
    provider_key: Optional[GenerativeProviderKey] = Field(
        alias="providerKey", default=None
    )
    model_name: Optional[str] = Field(alias="modelName", default=None)


class PatchAnnotationInput(BaseModel):
    annotation_id: Any = Field(alias="annotationId")
    name: Optional[str] = None
    annotator_kind: Optional[AnnotatorKind] = Field(alias="annotatorKind", default=None)
    label: Optional[str] = None
    score: Optional[float] = None
    explanation: Optional[str] = None
    metadata: Optional[Any] = None


class PatchDatasetExamplesInput(BaseModel):
    patches: List["DatasetExamplePatch"]
    version_description: Optional[str] = Field(alias="versionDescription", default=None)
    version_metadata: Optional[Any] = Field(alias="versionMetadata", default=None)


class PatchDatasetInput(BaseModel):
    dataset_id: Any = Field(alias="datasetId")
    name: Optional[str] = None
    description: Optional[str] = None
    metadata: Optional[Any] = None


class PatchPromptInput(BaseModel):
    prompt_id: Any = Field(alias="promptId")
    description: str


class PatchPromptLabelInput(BaseModel):
    prompt_label_id: Any = Field(alias="promptLabelId")
    name: Optional[Any] = None
    description: Optional[str] = None


class PatchUserInput(BaseModel):
    user_id: Any = Field(alias="userId")
    new_role: Optional[UserRoleInput] = Field(alias="newRole", default=None)
    new_username: Optional[str] = Field(alias="newUsername", default=None)
    new_password: Optional[str] = Field(alias="newPassword", default=None)


class PatchViewerInput(BaseModel):
    new_username: Optional[str] = Field(alias="newUsername", default=None)
    new_password: Optional[str] = Field(alias="newPassword", default=None)
    current_password: Optional[str] = Field(alias="currentPassword", default=None)


class PerformanceMetricInput(BaseModel):
    metric: PerformanceMetric


class ProjectSessionSort(BaseModel):
    col: ProjectSessionColumn
    dir: SortDir


class PromptChatTemplateInput(BaseModel):
    messages: List["PromptMessageInput"]


class PromptMessageInput(BaseModel):
    role: str
    content: List["ContentPartInput"]


class PromptTemplateOptions(BaseModel):
    variables: Any
    format: PromptTemplateFormat


class ResponseFormatInput(BaseModel):
    definition: Any


class SetPromptLabelInput(BaseModel):
    prompt_id: Any = Field(alias="promptId")
    prompt_label_id: Any = Field(alias="promptLabelId")


class SetPromptVersionTagInput(BaseModel):
    prompt_version_id: Any = Field(alias="promptVersionId")
    name: Any
    description: Optional[str] = None


class SpanAnnotationSort(BaseModel):
    col: SpanAnnotationColumn
    dir: SortDir


class SpanSort(BaseModel):
    col: Optional[SpanColumn] = None
    eval_result_key: Optional["EvalResultKey"] = Field(
        alias="evalResultKey", default=None
    )
    dir: SortDir


class TextContentValueInput(BaseModel):
    text: str


class TimeRange(BaseModel):
    start: Optional[Any] = None
    end: Optional[Any] = None


class ToolCallContentValueInput(BaseModel):
    tool_call_id: str = Field(alias="toolCallId")
    tool_call: "ToolCallFunctionInput" = Field(alias="toolCall")


class ToolCallFunctionInput(BaseModel):
    type: Optional[str] = "function"
    name: str
    arguments: str


class ToolDefinitionInput(BaseModel):
    definition: Any


class ToolResultContentValueInput(BaseModel):
    tool_call_id: str = Field(alias="toolCallId")
    result: Any


class TraceAnnotationSort(BaseModel):
    col: TraceAnnotationColumn
    dir: SortDir


class UnsetPromptLabelInput(BaseModel):
    prompt_id: Any = Field(alias="promptId")
    prompt_label_id: Any = Field(alias="promptLabelId")


AddExamplesToDatasetInput.model_rebuild()
ChatCompletionInput.model_rebuild()
ChatCompletionOverDatasetInput.model_rebuild()
ChatPromptVersionInput.model_rebuild()
ContentPartInput.model_rebuild()
CreateChatPromptInput.model_rebuild()
CreateChatPromptVersionInput.model_rebuild()
PatchDatasetExamplesInput.model_rebuild()
PromptChatTemplateInput.model_rebuild()
PromptMessageInput.model_rebuild()
SpanSort.model_rebuild()
ToolCallContentValueInput.model_rebuild()
