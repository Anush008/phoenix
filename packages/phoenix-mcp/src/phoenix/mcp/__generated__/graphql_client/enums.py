# Generated by ariadne-codegen
# Source: app/schema.graphql

from enum import Enum


class AnnotatorKind(str, Enum):
    LLM = "LLM"
    HUMAN = "HUMAN"


class AuthMethod(str, Enum):
    LOCAL = "LOCAL"
    OAUTH2 = "OAUTH2"


class CanonicalParameterName(str, Enum):
    TEMPERATURE = "TEMPERATURE"
    MAX_COMPLETION_TOKENS = "MAX_COMPLETION_TOKENS"
    STOP_SEQUENCES = "STOP_SEQUENCES"
    TOP_P = "TOP_P"
    RANDOM_SEED = "RANDOM_SEED"
    TOOL_CHOICE = "TOOL_CHOICE"
    RESPONSE_FORMAT = "RESPONSE_FORMAT"
    REASONING_EFFORT = "REASONING_EFFORT"
    ANTHROPIC_EXTENDED_THINKING = "ANTHROPIC_EXTENDED_THINKING"


class ChatCompletionMessageRole(str, Enum):
    USER = "USER"
    SYSTEM = "SYSTEM"
    TOOL = "TOOL"
    AI = "AI"


class DataQualityMetric(str, Enum):
    cardinality = "cardinality"
    percentEmpty = "percentEmpty"
    mean = "mean"
    sum = "sum"
    min = "min"
    max = "max"
    count = "count"
    p01 = "p01"
    p25 = "p25"
    p50 = "p50"
    p75 = "p75"
    p99 = "p99"


class DatasetColumn(str, Enum):
    createdAt = "createdAt"
    name = "name"


class DatasetVersionColumn(str, Enum):
    createdAt = "createdAt"


class DimensionDataType(str, Enum):
    categorical = "categorical"
    numeric = "numeric"


class DimensionShape(str, Enum):
    continuous = "continuous"
    discrete = "discrete"


class DimensionType(str, Enum):
    feature = "feature"
    tag = "tag"
    prediction = "prediction"
    actual = "actual"


class EvalAttr(str, Enum):
    score = "score"
    label = "label"


class ExperimentRunAnnotatorKind(str, Enum):
    LLM = "LLM"
    HUMAN = "HUMAN"
    CODE = "CODE"


class GenerativeProviderKey(str, Enum):
    OPENAI = "OPENAI"
    ANTHROPIC = "ANTHROPIC"
    AZURE_OPENAI = "AZURE_OPENAI"
    GOOGLE = "GOOGLE"


class InferencesRole(str, Enum):
    primary = "primary"
    reference = "reference"


class InvocationInputField(str, Enum):
    value_int = "value_int"
    value_float = "value_float"
    value_bool = "value_bool"
    value_string = "value_string"
    value_json = "value_json"
    value_string_list = "value_string_list"
    value_boolean = "value_boolean"


class MimeType(str, Enum):
    text = "text"
    json = "json"


class ModelProvider(str, Enum):
    OPENAI = "OPENAI"
    AZURE_OPENAI = "AZURE_OPENAI"
    ANTHROPIC = "ANTHROPIC"
    GOOGLE = "GOOGLE"


class PerformanceMetric(str, Enum):
    accuracyScore = "accuracyScore"


class ProjectSessionColumn(str, Enum):
    startTime = "startTime"
    endTime = "endTime"
    tokenCountTotal = "tokenCountTotal"
    numTraces = "numTraces"


class PromptMessageRole(str, Enum):
    USER = "USER"
    SYSTEM = "SYSTEM"
    AI = "AI"
    TOOL = "TOOL"


class PromptTemplateFormat(str, Enum):
    MUSTACHE = "MUSTACHE"
    F_STRING = "F_STRING"
    NONE = "NONE"


class PromptTemplateType(str, Enum):
    STRING = "STRING"
    CHAT = "CHAT"


class RevisionKind(str, Enum):
    CREATE = "CREATE"
    PATCH = "PATCH"
    DELETE = "DELETE"


class ScalarDriftMetric(str, Enum):
    psi = "psi"
    klDivergence = "klDivergence"
    jsDistance = "jsDistance"


class SortDir(str, Enum):
    asc = "asc"
    desc = "desc"


class SpanAnnotationColumn(str, Enum):
    createdAt = "createdAt"
    name = "name"


class SpanColumn(str, Enum):
    startTime = "startTime"
    endTime = "endTime"
    latencyMs = "latencyMs"
    tokenCountTotal = "tokenCountTotal"
    tokenCountPrompt = "tokenCountPrompt"
    tokenCountCompletion = "tokenCountCompletion"
    cumulativeTokenCountTotal = "cumulativeTokenCountTotal"
    cumulativeTokenCountPrompt = "cumulativeTokenCountPrompt"
    cumulativeTokenCountCompletion = "cumulativeTokenCountCompletion"


class SpanKind(str, Enum):
    chain = "chain"
    tool = "tool"
    llm = "llm"
    retriever = "retriever"
    embedding = "embedding"
    agent = "agent"
    reranker = "reranker"
    evaluator = "evaluator"
    guardrail = "guardrail"
    unknown = "unknown"


class SpanStatusCode(str, Enum):
    OK = "OK"
    ERROR = "ERROR"
    UNSET = "UNSET"


class TraceAnnotationColumn(str, Enum):
    createdAt = "createdAt"
    name = "name"


class UserRoleInput(str, Enum):
    ADMIN = "ADMIN"
    MEMBER = "MEMBER"


class VectorDriftMetric(str, Enum):
    euclideanDistance = "euclideanDistance"
